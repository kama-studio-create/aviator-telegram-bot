#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function createDirectoryStructure() {
  log('\n📁 Creating project structure...', 'cyan');
  
  const directories = [
    'public',
    'public/admin',
    'public/css',
    'public/js', 
    'src',
    'test',
    'config'
  ];
  
  directories.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      log(`✅ Created directory: ${dir}`, 'green');
    }
  });
}

function createPackageJson() {
  log('\n📦 Creating package.json...', 'cyan');
  
  const packageJson = {
    "name": "aviator-telegram-bot",
    "version": "1.0.0",
    "description": "Complete Telegram Aviator crash game with advanced admin system",
    "main": "server.js",
    "scripts": {
      "start": "node server.js",
      "dev": "nodemon server.js",
      "test": "node test/test-provably-fair.js",
      "setup": "node setup-integration.js",
      "deploy": "node deploy-free.js",
      "deploy:render": "npm run build && git push"
    },
    "dependencies": {
      "express": "^4.18.2",
      "socket.io": "^4.7.2", 
      "node-telegram-bot-api": "^0.63.0",
      "cors": "^2.8.5",
      "bcrypt": "^5.1.0",
      "jsonwebtoken": "^9.0.2",
      "express-rate-limit": "^6.10.0",
      "helmet": "^7.0.0",
      "morgan": "^1.10.0",
      "dotenv": "^16.3.1"
    },
    "devDependencies": {
      "nodemon": "^3.0.1"
    },
    "engines": {
      "node": ">=18.0.0"
    }
  };
  
  fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
  log('✅ Created package.json', 'green');
}

function createEnvTemplate() {
  log('\n⚙️ Creating environment template...', 'cyan');
  
  const envTemplate = `# ===========================================
# AVIATOR TELEGRAM BOT CONFIGURATION
# ===========================================

# Basic Configuration
BOT_TOKEN=your_telegram_bot_token_here
WEB_APP_URL=https://your-app-name.onrender.com
PORT=3000
NODE_ENV=production

# Admin Configuration  
ADMIN_SECRET=your_super_secure_admin_password_here
JWT_SECRET=your_jwt_secret_key_here_make_it_very_long_and_random

# Game Settings
RTP=0.98
HOUSE_EDGE=0.02
GAME_DURATION=30000
BET_PHASE_DURATION=5000
MIN_BET=1
MAX_BET=1000
STARTING_BALANCE=1000

# Bonus Configuration
WELCOME_BONUS=100
DAILY_BONUS=50
REFERRAL_BONUS=200
VIP_THRESHOLD=50000

# Security Settings
RATE_LIMIT_MAX_REQUESTS=100
RATE_LIMIT_WINDOW_MS=900000

# Optional Database (for production)
# DATABASE_URL=mongodb://localhost:27017/aviator
# REDIS_URL=redis://localhost:6379

# Render.com Specific
RENDER=true
`;
  
  fs.writeFileSync('.env.template', envTemplate);
  log('✅ Created .env.template', 'green');
  
  if (!fs.existsSync('.env')) {
    fs.writeFileSync('.env', envTemplate);
    log('✅ Created .env file (update with your values)', 'yellow');
  }
}

function createRenderConfig() {
  log('\n🚀 Creating Render.com configuration...', 'cyan');
  
  const renderYaml = `# render.yaml - Render.com deployment config
services:
  - type: web
    name: aviator-telegram-bot
    env: node
    plan: free
    buildCommand: npm install
    startCommand: npm start
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        generateValue: true
    # Add these environment variables in Render dashboard:
    # BOT_TOKEN - Your Telegram bot token
    # ADMIN_SECRET - Admin dashboard password
    # WEB_APP_URL - Will be: https://your-service-name.onrender.com
    # JWT_SECRET - Random string for JWT tokens
`;
  
  fs.writeFileSync('render.yaml', renderYaml);
  log('✅ Created render.yaml for Render.com', 'green');
}

function createRenderDeployScript() {
  log('\n📋 Creating Render.com deployment instructions...', 'cyan');
  
  const deployInstructions = `# 🚀 RENDER.COM DEPLOYMENT GUIDE

## Step 1: Prepare Your Repository
1. Push your code to GitHub
2. Make sure all files are committed

## Step 2: Create Render Service
1. Go to https://render.com
2. Sign up/login with GitHub
3. Click "New +" → "Web Service"
4. Connect your GitHub repository
5. Configure:
   - Name: aviator-telegram-bot
   - Environment: Node
   - Build Command: npm install
   - Start Command: npm start

## Step 3: Set Environment Variables
In Render dashboard, add these environment variables:

Required:
- BOT_TOKEN: Your Telegram bot token from @BotFather
- ADMIN_SECRET: Strong password for admin dashboard
- WEB_APP_URL: https://your-service-name.onrender.com
- JWT_SECRET: Random long string (generate one)

Optional:
- NODE_ENV: production (usually auto-set)
- PORT: (auto-generated by Render)

## Step 4: Deploy
1. Click "Create Web Service"
2. Wait for build to complete (~5-10 minutes)
3. Your app will be live at: https://your-service-name.onrender.com

## Step 5: Configure Telegram Bot
1. Copy your Render.com URL
2. Message @BotFather: /setmenubutton
3. Set Web App URL to your Render.com URL
4. Test your bot!

## Free Tier Limits:
- 750 hours/month (about 24/7 for 31 days)
- Sleeps after 15 minutes of inactivity
- Cold start delay (~30 seconds)

## Important Notes:
- Free apps sleep when inactive
- First request after sleep takes ~30 seconds
- Upgrade to paid plan for 24/7 uptime
`;

  fs.writeFileSync('RENDER_DEPLOY.md', deployInstructions);
  log('✅ Created RENDER_DEPLOY.md with deployment instructions', 'green');
}

function validateIntegration() {
  log('\n🔍 Validating integration...', 'cyan');
  
  const requiredFiles = [
    'server.js',
    'telegram-bot.js', 
    'public/index.html',
    'public/admin/index.html',
    'package.json',
    '.env'
  ];
  
  const missingFiles = requiredFiles.filter(file => !fs.existsSync(file));
  
  if (missingFiles.length > 0) {
    log('❌ Missing required files:', 'red');
    missingFiles.forEach(file => log(`   - ${file}`, 'red'));
    log('\nPlease ensure all component files are in place.', 'yellow');
    return false;
  }
  
  log('✅ All required files present', 'green');
  
  // Check .env configuration
  try {
    const envContent = fs.readFileSync('.env', 'utf8');
    
    if (envContent.includes('your_telegram_bot_token_here')) {
      log('⚠️  Please update BOT_TOKEN in .env file', 'yellow');
    }
    
    if (envContent.includes('your_super_secure_admin_password_here')) {
      log('⚠️  Please update ADMIN_SECRET in .env file', 'yellow');
    }
    
    if (envContent.includes('your-app-name.onrender.com')) {
      log('⚠️  Please update WEB_APP_URL in .env file after deployment', 'yellow');
    }
    
  } catch (error) {
    log('❌ Could not read .env file', 'red');
    return false;
  }
  
  return true;
}

function showRenderIntegrationSummary() {
  log('\n🎯 RENDER.COM INTEGRATION SUMMARY', 'bright');
  log('===================================', 'blue');
  
  log('\n📁 Project Structure:', 'cyan');
  log('   ├── server.js                 # Main backend server', 'green');
  log('   ├── telegram-bot.js           # Telegram bot integration', 'green');
  log('   ├── public/index.html         # Game frontend', 'green');
  log('   ├── public/admin/index.html   # Admin dashboard', 'green');
  log('   ├── package.json              # Dependencies', 'green');
  log('   ├── render.yaml               # Render.com config', 'green');
  log('   ├── RENDER_DEPLOY.md          # Deployment guide', 'green');
  log('   └── .env                      # Configuration', 'green');
  
  log('\n🔗 Component Integration:', 'cyan');
  log('   • Frontend ←→ Backend:        WebSocket + REST API', 'green');
  log('   • Admin ←→ Backend:           JWT Auth + WebSocket', 'green');
  log('   • Bot ←→ Backend:             Direct integration', 'green');
  log('   • Game Engine ←→ All:         Real-time updates', 'green');
  
  log('\n🚀 Render.com Deployment:', 'cyan');
  log('   • Platform: Render.com (FREE)', 'green');
  log('   • Plan: Free tier (750 hours/month)', 'green');
  log('   • Auto-deploy: From GitHub', 'green');
  log('   • SSL: Included (HTTPS)', 'green');
  log('   • URL: https://your-app.onrender.com', 'green');
  
  log('\n📋 Next Steps:', 'cyan');
  log('   1. Update .env with your bot token', 'yellow');
  log('   2. Push code to GitHub repository', 'yellow');
  log('   3. Follow RENDER_DEPLOY.md instructions', 'yellow');
  log('   4. Configure environment variables in Render', 'yellow');
  log('   5. Set Telegram Web App URL to your Render URL', 'yellow');
  
  log('\n🎮 Access Points (After Deployment):', 'cyan');
  log('   • Game Interface: https://your-app.onrender.com', 'green');
  log('   • Admin Dashboard: https://your-app.onrender.com/admin', 'green');  
  log('   • API Health: https://your-app.onrender.com/api/health', 'green');
  
  log('\n📱 Telegram Bot Setup:', 'cyan');
  log('   1. Get token from @BotFather', 'yellow');
  log('   2. Send: /setmenubutton', 'yellow');
  log('   3. Button text: 🎮 Play Aviator', 'yellow');
  log('   4. Web App URL: https://your-app.onrender.com', 'yellow');
  
  log('\n⚡ Render.com Free Tier:', 'cyan');
  log('   • 750 hours/month (31 days continuous)', 'green');
  log('   • Sleeps after 15 min inactivity', 'yellow');
  log('   • Cold start ~30 seconds', 'yellow');
  log('   • Auto-wake on first request', 'green');
  log('   • No persistent storage', 'yellow');
  
  log('\n✨ Features Ready:', 'cyan');
  log('   ✅ Plane-themed crash game with animations', 'green');
  log('   ✅ Real-time multiplayer with WebSocket', 'green');
  log('   ✅ Provably fair system with verification', 'green');
  log('   ✅ Advanced admin dashboard with analytics', 'green');
  log('   ✅ Complete user management system', 'green');
  log('   ✅ Dynamic odds control and house edge', 'green');
  log('   ✅ Financial tracking and profit analysis', 'green');
  log('   ✅ Mobile-optimized Telegram WebApp', 'green');
  log('   ✅ Free deployment on Render.com', 'green');
}

function main() {
  log('🛩️ AVIATOR BOT - RENDER.COM INTEGRATION SETUP', 'bright');
  log('==============================================', 'blue');
  
  log('\nThis script will set up complete integration optimized for Render.com:', 'cyan');
  log('• 🎮 Frontend Game Interface', 'green');
  log('• 🖥️  Backend Server & API', 'green');
  log('• 👨‍💼 Admin Dashboard', 'green');
  log('• 🤖 Telegram Bot', 'green');
  log('• ⚡ WebSocket Real-time Updates', 'green');
  log('• 🚀 Render.com Deployment Config', 'green');
  
  // Create project structure
  createDirectoryStructure();
  
  // Create configuration files
  createPackageJson();
  createEnvTemplate();
  createRenderConfig();
  createRenderDeployScript();
  
  // Validate integration
  const isValid = validateIntegration();
  
  if (isValid) {
    showRenderIntegrationSummary();
    
    log('\n🎉 RENDER.COM INTEGRATION SETUP COMPLETE!', 'bright');
    log('=========================================', 'green');
    
    log('\n🔧 Final Steps:', 'cyan');
    log('1. Edit .env with your bot token and admin password', 'yellow');
    log('2. Push code to GitHub: git add . && git commit -m "Initial" && git push', 'yellow'); 
    log('3. Follow RENDER_DEPLOY.md for deployment', 'yellow');
    
    log('\n🎮 Your Render.com-optimized Aviator bot is ready! 🛩️✨', 'bright');
  } else {
    log('\n❌ Integration setup incomplete. Please fix the issues above.', 'red');
  }
}

// Run if this file is executed directly
if (require.main === module) {
  main();
}

module.exports = {
  createDirectoryStructure,
  createPackageJson,
  createEnvTemplate,
  createRenderConfig,
  validateIntegration,
  main
};